/*
 * ITU REST API
 *
 * This is documentation for our REST api for mandatory exercise 1 in the distributed systems course
 *
 * API version: 1.0.1Â½
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

var courses []Course

func AddCourse(w http.ResponseWriter, r *http.Request) {
	w = writeSucess(w)

	var course = parseCourse(r.Body)
	fmt.Println("Adding course: " + course.Name)
	var inArray bool
	for i := 0; i < len(courses); i++ {
		if courses[i].Id == course.Id {
			inArray = true
			courses[i] = course
		}
	}
	if !inArray {
		courses = append(courses, course)
	}
	json, err := generateJsonReponse(w, fmt.Sprint("Added course with id ", course.Id))
	fmt.Println("Courses:")
	fmt.Println("Length of array", len(courses))

	if err != nil {
		return
	}
	w.Write(json)
}

func DeleteCourse(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, ok := vars["courseId"]
	if !ok {
		fmt.Println("id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No id given")
		if err != nil {
			return
		}
		w.Write(json)
	}

	fmt.Println("Removing course with id: " + id)
	var inArray bool
	numId, _ := strconv.Atoi(id)
	for i := 0; i < len(courses); i++ {

		if courses[i].Id == int64(numId) {
			inArray = true
			courses = remove(courses, i)
			w = writeSucess(w)
			json, err := generateJsonReponse(w, fmt.Sprint("Successfully removed course with id ", id))
			if err != nil {
				return
			}
			w.Write(json)
		}
	}
	if !inArray {
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", id))
		if err != nil {
			return
		}
		w.Write(json)
	}
	fmt.Println("Courses:")
	fmt.Println("Length of array", len(courses))
}

func remove(s []Course, i int) []Course {
	s[i] = s[len(s)-1]
	return s[:len(s)-1]
}

func EnrollStudent(w http.ResponseWriter, r *http.Request) {
	w = writeSucess(w)
	vars := mux.Vars(r)
	courseID, ok := vars["courseId"]
	if !ok {
		fmt.Println("Course id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No course id given")
		if err != nil {
			return
		}
		w.Write(json)
	}
	studentID, ok := vars["studentId"]
	if !ok {
		fmt.Println("Student id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No student id given")
		if err != nil {
			return
		}
		w.Write(json)
	}
	numCourseId, _ := strconv.Atoi(courseID)
	numStudentId, _ := strconv.Atoi(studentID)
	var student Student
	for i := 0; i < len(students); i++ {
		if students[i].Id == int64(numStudentId) {
			student = students[i]
		}
	}
	if student == (Student{}) {
		fmt.Println("No student found with id", studentID)
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No student with id ", studentID))
		if err != nil {
			return
		}
		w.Write(json)
	}
	for i := 0; i < len(courses); i++ {

		if courses[i].Id == int64(numCourseId) {
			course := courses[i]
			course.Students = append(course.Students, student)
			courses[i] = course
			w = writeSucess(w)
			json, err := generateJsonReponse(w, fmt.Sprint("Successfully added ", student.Name))
			if err != nil {
				return
			}
			w.Write(json)
			return
		}
	}
	fmt.Println("No course found with id", courseID)
	w = writeFail(w)
	json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", courseID))
	if err != nil {
		return
	}
	w.Write(json)
}

func GetCourseById(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, ok := vars["courseId"]
	if !ok {
		fmt.Println("id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No id given")
		if err != nil {
			return
		}
		w.Write(json)
	}
	fmt.Println("Getting course with id", id)
	var inArray bool
	numId, _ := strconv.Atoi(id)
	for i := 0; i < len(courses); i++ {

		if courses[i].Id == int64(numId) {
			inArray = true
			course := courses[i]
			w = writeSucess(w)
			json, err := json.Marshal(course)
			if err != nil {
				return
			}
			w.Write(json)
		}
	}
	if !inArray {
		fmt.Println("No course with id", id)
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", id))
		if err != nil {
			return
		}
		w.Write(json)
	}
}

func RateCourse(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, ok := vars["courseId"]
	if !ok {
		fmt.Println("id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No id given")
		if err != nil {
			return
		}
		w.Write(json)
	}
	rating, ok := vars["rating"]
	if !ok {
		fmt.Println("rating is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No rating given")
		if err != nil {
			return
		}
		w.Write(json)
	}

	var inArray bool
	numId, _ := strconv.Atoi(id)
	numRating, _ := strconv.Atoi(id)
	for i := 0; i < len(courses); i++ {

		if courses[i].Id == int64(numId) {
			inArray = true
			course := courses[i]

			course.Rating = int64(numRating)
			courses[i] = course
			w = writeSucess(w)
			json, err := generateJsonReponse(w, fmt.Sprint("Updated rating on course with id", course.Id, "to", rating))
			if err != nil {
				return
			}
			w.Write(json)
		}
	}
	if !inArray {
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", id))
		if err != nil {
			return
		}
		w.Write(json)
	}
	fmt.Println("Courses:")
	fmt.Println("Length of array", len(courses))
}

func UpdateCourse(w http.ResponseWriter, r *http.Request) {
	var course = parseCourse(r.Body)
	fmt.Println("Adding course: " + course.Name)
	var inArray bool
	for i := 0; i < len(courses); i++ {
		if courses[i].Id == course.Id {
			inArray = true
			courses[i] = course
			w = writeSucess(w)
			json, err := generateJsonReponse(w, fmt.Sprint("Updated course with id ", course.Id))
			if err != nil {
				return
			}
			w.Write(json)
		}
	}
	if !inArray {
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", course.Id))
		if err != nil {
			return
		}
		w.Write(json)
	}
	fmt.Println("Courses:")
	fmt.Println("Length of array", len(courses))

}

func UpdateCourseWithId(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id, ok := vars["courseId"]
	if !ok {
		fmt.Println("id is missing in parameters")

		w = writeFail(w)
		json, err := generateJsonReponse(w, "No id given")
		if err != nil {
			return
		}
		w.Write(json)
	}

	var course = parseCourse(r.Body)
	fmt.Println("Updating course: " + course.Name)
	var inArray bool
	numId, _ := strconv.Atoi(id)
	for i := 0; i < len(courses); i++ {

		if courses[i].Id == int64(numId) {
			inArray = true
			courses[i] = course
			w = writeSucess(w)
			json, err := generateJsonReponse(w, fmt.Sprint("Updated course with id ", course.Id))
			if err != nil {
				return
			}
			w.Write(json)
		}
	}
	if !inArray {
		w = writeFail(w)
		json, err := generateJsonReponse(w, fmt.Sprint("No course with id ", course.Id))
		if err != nil {
			return
		}
		w.Write(json)
	}
	fmt.Println("Courses:")
	fmt.Println("Length of array", len(courses))
}
